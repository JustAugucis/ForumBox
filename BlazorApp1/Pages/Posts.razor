@page "/Posts"
@using System.Security.Claims
@using Domain.DTOs
@using global::Shared.Models
@using HttpClients.ClientInterfaces
@inject IPostService postService
@inject NavigationManager navMgr




<h3>Here you can see user posts</h3>

@if (isLoggedIn)
{
    <h3>Hello @name</h3>
    <h1>@msg</h1>
    <p>
        @if (posts != null)
        {<p>
             Posts:
             <ul>
                 @foreach (Post post in posts!)
                 {
                     <li style="color:darkblue" @onclick="@(() => navMgr.NavigateTo($"/Posts/{@post.Title}"))">
                         <label>@post.CreatorName: @post.Title</label>
                     </li>
                 }
             </ul>
        
         </p>
        }
    </p>
}
else
{
    <p>You are not logged in.</p>
}

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private string? name;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    private IEnumerable<Post>? posts;
    private string msg = "";
    
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        msg = "";
        try
        {
            SearchPostParametersDto dto = new SearchPostParametersDto();
            dto.CreatorName = null;
            dto.Title = null;
            dto.body = null;
            posts = await postService.GetPosts(dto);    // error here
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
        
        
        
        if (!isLoggedIn) return;
        
        userClaims = user.Claims;
        name = user.Identity!.Name!;
    }

}
